var client = io.connect( 'http://108.161.128.208:1111' );			// Create socket connection to game

client.on( 'pause', function( data ){						// Pause event handler
	console.log( "Game Paused", "Reason: " + data.message );
});

client.on( 'sync', function( data ){						// Sync event handler
	console.log( 'syncing...' );
	console.log( data.message );
});


										// DOM Ready
$(function( ){
	window.ontouchmove = function(){ event.preventDefault(); }; 		// No overscrolling on Touch Devices
	var camera, scene, renderer;						// Declare Camera Variables in empty f() global scope
	var tank, tankGeometry, tankMaterial, tankPosition;			// Declare Tank Variables in empty f() global scope

	gameboardInit( );							// Create a Camera and Scene with a Tank in it.
	tankControlsInit( );							// Set up tank controls
	
	function gameboardInit( ){						// Initilize Gameboard

		var cameraFieldOfView = 45,					// Set Camera  field of view,
		aspectRatio 	= $( window ).width( ) / $( window ).height( ), // Set aspect ratio,
		near 		= 1,						// Set frustum near plane,
		far 		= 10000;					// Set frustom far plane.

		var startPos 	= { 						// Set Camera Position
			z: 1000
		};
		var tankDim 	= {						// Set Tank Dimentions
			x: 100,
			y: 100,
			z: 100
		}
		var tankMaterialSettings = {					// Set Tank Material settings
			color: 0xcccccc,
			wireframe: false
		};

		var lightSettings = {
			x: 0,
			y: 0,
			z: 100,
			color: 0xFF0000
		}

		light = new THREE.PointLight( lightSettings.color );
		light.position.x = lightSettings.x;
		light.position.y = lightSettings.y;
		light.position.z = lightSettings.z;

		camera = new THREE.PerspectiveCamera( cameraFieldOfView, aspectRatio, near, far );	// Create a new Camera,
		camera.position.z = startPos.z;								// Set camera z position

		tankGeometry 	= new THREE.CubeGeometry( tankDim.x, tankDim.y, tankDim.z );		// Set Tank Geometry using Tank Dimentions
		tankMaterial 	= new THREE.MeshLambertMaterial( tankMaterialSettings );		// Set Tank Material using Tank Material settings
		tank 		= new THREE.Mesh( tankGeometry, tankMaterial );				// Create Tank Mesh

		scene = new THREE.Scene( );								// Create a new Scene
		scene.add( tank );									// Add Tank to the new Scene
		scene.add( light );

		renderer = new THREE.CanvasRenderer();							// Create a Renderer to show the Scene
		renderer.setSize( $(window).width(), $(window).height() );				// Set the size of the Renderer
		rendererContainer = $( '<div />' ).attr( 'id', 'renderer' )				// Create the renderer DOM object
			.append( renderer.domElement )							// Add the Renderer to the Renderer DOM object
			.appendTo( $( 'body') );							// Add the Renderer DOM element to the Body

		return true;										// Return true
	}
	
	function tankControlsInit( ) {

		spinTank( );

		rendererContainer[0].ontouchmove =  function( ){
			//alert(event.touches.item(1).clientX)
			//var touchX = event.touches.item(1).clientX;
			//var touchY = event.touches.item(1).clientY;
			
			//alert();
			
			move()
			function move( ){
				animateTank({
					Rx: 0,
					Ry: 0,
					Tz: .5,
					frame: move
				});
			}
		};

		function spinTank( ) {
			animateTank({
				Rx: .01,
				Ry: 0,
				Rz: .01,
				frame: spinTank
			});
		}

		function moveTank( position ) {
			animateTank({
				Rx: position.Rx,
				Ry: position.Ry,
				Rz: position.Rz,
				scale: position.scale,
				frame: moveTank
			});
		}

		function animateTank( options ){
			requestAnimationFrame( options.frame  );

			tank.rotation.x += options != undefined && options.Rx != undefined ? options.Rx : 0;
			tank.rotation.y += options != undefined && options.Ry != undefined ? options.Ry : 0;
			tank.rotation.z += options != undefined && options.Rz != undefined ? options.Rz : 0;
			tank.position.x += options != undefined && options.Tx != undefined ? options.Tx : 0;
			tank.position.y += options != undefined && options.Ty != undefined ? options.Ty : 0;
			tank.position.z += options != undefined && options.Tz != undefined ? options.Tz : 0;

			renderer.render( scene, camera );

			return true;
		}

	}

	window.tank = tank;
	window.renderer = renderer;
	window.scene = scene;
	window.camera = camera;
	window.rendererContainer = rendererContainer;

});
